# coding: utf-8

"""
    LocalStack REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 3.7.3.dev45
    Contact: info@localstack.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from localstack.generated.models.get_cloudwatch_metrics200_response_metrics_inner_d_inner import GetCloudwatchMetrics200ResponseMetricsInnerDInner
from typing import Optional, Set
from typing_extensions import Self

class GetCloudwatchMetrics200ResponseMetricsInner(BaseModel):
    """
    GetCloudwatchMetrics200ResponseMetricsInner
    """ # noqa: E501
    account: StrictStr = Field(description="Account ID")
    d: List[GetCloudwatchMetrics200ResponseMetricsInnerDInner] = Field(description="Dimensions")
    n: StrictStr = Field(description="Metric name")
    ns: StrictStr = Field(description="Namespace")
    region: StrictStr = Field(description="Region name")
    t: Union[StrictFloat, StrictInt] = Field(description="Timestamp")
    v: StrictStr = Field(description="Metric value")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["account", "d", "n", "ns", "region", "t", "v"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetCloudwatchMetrics200ResponseMetricsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in d (list)
        _items = []
        if self.d:
            for _item_d in self.d:
                if _item_d:
                    _items.append(_item_d.to_dict())
            _dict['d'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetCloudwatchMetrics200ResponseMetricsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "account": obj.get("account"),
            "d": [GetCloudwatchMetrics200ResponseMetricsInnerDInner.from_dict(_item) for _item in obj["d"]] if obj.get("d") is not None else None,
            "n": obj.get("n"),
            "ns": obj.get("ns"),
            "region": obj.get("region"),
            "t": obj.get("t"),
            "v": obj.get("v")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


